# cloudbuild.yaml
steps:
  # 1. Install Frontend Dependencies & Run Tests (with caching)
  - name: "gcr.io/cloud-builders/npm"
    id: "Frontend Install"
    args: ["install"]
    dir: "frontend"
    volumes:
      - name: "frontend_node_modules"
        path: "/workspace/frontend/node_modules"

  - name: "gcr.io/cloud-builders/npm"
    id: "Frontend Test"
    args: ["test"]
    dir: "frontend"
    volumes:
      - name: "frontend_node_modules"
        path: "/workspace/frontend/node_modules"

  # 2. Install Backend Dependencies
  # No cache needed here as node_modules are not reused in subsequent steps.
  # The Docker build step runs its own clean npm install.
  - name: "gcr.io/cloud-builders/npm"
    id: "Backend Install"
    args: ["install"]
    dir: "backend"

  # Add a step for backend tests if you have them

  # 3. Build Production React App
  - name: "gcr.io/cloud-builders/npm"
    id: "Build Frontend"
    args: ["run", "build"]
    dir: "frontend"
    volumes:
      - name: "frontend_node_modules"
        path: "/workspace/frontend/node_modules"

  # 4. Build Backend Docker Image
  - name: "gcr.io/cloud-builders/docker"
    id: "Build Backend Docker Image"
    args:
      [
        "build",
        "-t",
        "us-central1-docker.pkg.dev/$PROJECT_ID/portfolio-repo/backend:$COMMIT_SHA",
        ".",
      ]
    dir: "backend"

  # 5. Push Backend Docker Image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    id: "Push Backend Image"
    args:
      [
        "push",
        "us-central1-docker.pkg.dev/$PROJECT_ID/portfolio-repo/backend:$COMMIT_SHA",
      ]

  # 6. Deploy to Cloud Run (Backend)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy Backend"
    entrypoint: "gcloud"
    args:
      [
        "run",
        "deploy",
        "portfolio-backend",
        "--image",
        "us-central1-docker.pkg.dev/$PROJECT_ID/portfolio-repo/backend:$COMMIT_SHA",
        "--region",
        "us-central1",
        "--platform",
        "managed",
        "--allow-unauthenticated",
        "--set-env-vars",
        "MONGODB_URI=$$MONGODB_URI_SECRET,EMAIL_USER=$$EMAIL_USER_SECRET,EMAIL_PASS=$$EMAIL_PASS_SECRET,RECIPIENT_EMAIL=$$RECIPIENT_EMAIL_SECRET",
      ]
    secretEnv:
      [
        "MONGODB_URI_SECRET",
        "EMAIL_USER_SECRET",
        "EMAIL_PASS_SECRET",
        "RECIPIENT_EMAIL_SECRET",
      ]

  # 7. Deploy to Firebase Hosting (Frontend)
  - name: "gcr.io/cloud-builders/npm"
    id: "Install Firebase Tools"
    entrypoint: "npm"
    args: ["install", "-g", "firebase-tools"]
  - name: "gcr.io/cloud-builders/firebase"
    id: "Deploy Frontend"
    entrypoint: "firebase"
    args: ["deploy", "--only", "hosting", "--project", "$PROJECT_ID"]
    dir: "frontend"

# This section tells Cloud Build which secrets to fetch from Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/mongodb-uri/versions/latest
      env: "MONGODB_URI_SECRET"
    - versionName: projects/$PROJECT_ID/secrets/email-user/versions/latest
      env: "EMAIL_USER_SECRET"
    - versionName: projects/$PROJECT_ID/secrets/email-pass/versions/latest
      env: "EMAIL_PASS_SECRET"
    - versionName: projects/$PROJECT_ID/secrets/recipient-email/versions/latest
      env: "RECIPIENT_EMAIL_SECRET"

# Specify the final image pushed to Artifact Registry
images:
  - "us-central1-docker.pkg.dev/$PROJECT_ID/portfolio-repo/backend:$COMMIT_SHA"

# Options to configure the build environment
options:
  # Use CLOUD_LOGGING_ONLY to avoid log bucket permissions issues.
  logging: CLOUD_LOGGING_ONLY
  # Specify a more powerful machine type to speed up the build.
  #machineType: "E2_HIGHCPU_8"
